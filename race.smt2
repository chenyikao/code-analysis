(set-logic QF_NIA)(declare-fun tM () Int)(declare-fun chunk () Int)(declare-fun gx () Int)(declare-fun tx () Int)(declare-fun ix () Int)(declare-fun jx () Int)(declare-fun gy () Int)(declare-fun ty () Int)(declare-fun iy () Int)(declare-fun k () Int)(declare-fun size () Int); (gx*tM+tx)*chunk <= ix < (gx*tM+tx+1)*chunk(assert (<= (* (+ (* gx tM) tx) chunk) ix))(assert (< ix (* (+ (+ (* gx tM) tx) 1) chunk))); (gy*tM+ty)*chunk <= iy < (gy*tM+ty+1)*chunk(assert (<= (* (+ (* gy tM) ty) chunk) iy))(assert (< iy (* (+ (+ (* gy tM) ty) 1) chunk)))(assert (not (= tx ty)))(assert (<= 0 tx))(assert (< tx tM))(assert (<= 0 ty))(assert (< ty tM))(assert (< 0 chunk))(assert (<= 0 gx))(assert (<= 0 gy)); k + 1 <= ix < size(assert (<= (+ k 1) ix))(assert (< ix size)); k + 1 <= jx < size(assert (<= (+ k 1) jx))(assert (< jx size))(assert (= k 1)); k + 1 < iy < size - 1(assert (< (+ k 1) iy))(assert (< iy (- size 1))); ix = iy - 1(assert (= ix (- iy 1)))(check-sat)(get-model)(exit)